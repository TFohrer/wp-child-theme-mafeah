# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: project

      - name: Install composer dependencies
        uses: php-actions/composer@v1
        with:
          command: composer install
          working-directory: project

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
        working-directory: project

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          working-directory: project
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install yarn dependencies
        run: yarn install
        working-directory: project

      - name: Build ðŸ”§
        run: yarn dist
        working-directory: project

      - name: cleanup
        run: |
          rm -rf .git
          rm -rf .github
          rm -rf node_modules
          rm -rf .vscode
          rm -f .gitignore
          rm -f .eslintrc.json
          rm -f .prettierrc
          rm -f .package-lock.json
          rm -f .package.json
          rm -f yarn.lock
          rm -f postcss.config.js
          rm -f prettier.config.js 
        working-directory: project

      # no rsync available on the server so we need to use scp
      - name: Deploy/Sync ðŸš€
        env:
          dest: '${{secrets.SSH_USER}}@${{secrets.SSH_SERVER}}:${{secrets.DEPLOY_DESTINATION}}'
        run: |
          echo "${{secrets.DEPLOY_KEY}}" > deploy_key
          chmod 600 ./deploy_key
          scp -o StrictHostKeyChecking=no -i ./deploy_key -r ./project/. ${{env.dest}}
